(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{571:function(v,_,r){"use strict";r.r(_);var t=r(13),a=Object(t.a)({},(function(){var v=this,_=v.$createElement,r=v._self._c||_;return r("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[r("h2",{attrs:{id:"chrome的多进程架构"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#chrome的多进程架构"}},[v._v("#")]),v._v(" Chrome的多进程架构")]),v._v(" "),r("p",[v._v("在浏览器刚被设计出来的时候，那时的网页非常的简单，每个网页的资源占有率是非常低的，因此一个进程处理多个网页时可行的。然后在今天，大量网页变得日益复杂。把所有网页都放进一个进程的浏览器面临在健壮性、响应速度、安全性方面的挑战，所以大部分现代浏览器都是多进程的。")]),v._v(" "),r("p",[v._v("浏览器进程主要分类如下：")]),v._v(" "),r("ul",[r("li",[v._v("浏览器进程")]),v._v(" "),r("li",[v._v("插件进程")]),v._v(" "),r("li",[v._v("GPU进程")]),v._v(" "),r("li",[v._v("渲染进程")])]),v._v(" "),r("p",[r("strong",[v._v("浏览器进程")])]),v._v(" "),r("p",[v._v("浏览器最核心的进程，负责管理各个标签页的创建和销毁、页面显示和功能（前进，后退，收藏等）、网络资源的管理，下载等。")]),v._v(" "),r("p",[r("strong",[v._v("插件进程")])]),v._v(" "),r("p",[v._v("负责每个第三方插件的使用，每个第三方插件使用时候都会创建一个对应的进程、这可以避免第三方插件crash影响整个浏览器、也方便使用沙盒模型隔离插件进程，提高浏览器稳定性。")]),v._v(" "),r("p",[r("strong",[v._v("GPU进程")])]),v._v(" "),r("p",[v._v("负责3D绘制和硬件加速")]),v._v(" "),r("p",[r("strong",[v._v("渲染进程")])]),v._v(" "),r("p",[v._v("浏览器会为每个窗口分配一个渲染进程、也就是我们常说的浏览器内核，这可以避免单个页面崩溃影响整个浏览器。")]),v._v(" "),r("h2",{attrs:{id:"浏览器内核的多线程"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#浏览器内核的多线程"}},[v._v("#")]),v._v(" 浏览器内核的多线程")]),v._v(" "),r("p",[v._v("浏览器内核就算浏览器渲染进程，从接收下载文件后再到呈现整个页面的过程，由浏览器渲染进程负责。浏览器内核是多线程的，在内核控制下各线程相互配合以保持同步，一个浏览器通常由以下常驻线程组成：")]),v._v(" "),r("ul",[r("li",[v._v("GUI渲染线程")]),v._v(" "),r("li",[v._v("定时触发器线程")]),v._v(" "),r("li",[v._v("事件触发线程")]),v._v(" "),r("li",[v._v("异步http请求线程")]),v._v(" "),r("li",[v._v("JavaScript引擎线程")])]),v._v(" "),r("p",[r("strong",[v._v("GUI渲染线程")])]),v._v(" "),r("p",[v._v("GUI 渲染线程负责渲染浏览器界面 HTML 元素,当界面需要重绘(Repaint)或由于某种操作引发回流(reflow)时,该线程就会执行。")]),v._v(" "),r("p",[r("strong",[v._v("定时触发器线程")])]),v._v(" "),r("p",[v._v("浏览器定时计数器并不是由 JavaScript 引擎计数的, 因为 JavaScript 引擎是单线程的, 如果处于阻塞线程状态就会影响记计时的准确, 因此通过单独线程来计时并触发定时是更为合理的方案。")]),v._v(" "),r("p",[r("strong",[v._v("事件触发线程")])]),v._v(" "),r("p",[v._v("当一个事件被触发时该线程会把事件添加到待处理队列的队尾，等待JS引擎的处理。这些事件可以是当前执行的代码块如定时任务、也可来自浏览器内核的其他线程如鼠标点击、AJAX异步请求等，但由于JS的单线程关系所有这些事件都得排队等待JS引擎处理。")]),v._v(" "),r("p",[r("strong",[v._v("异步http请求线程")])]),v._v(" "),r("p",[v._v("在XMLHttpRequest在连接后是通过浏览器新开一个线程请求， 将检测到状态变更时，如果设置有回调函数，异步线程就产生状态变更事件放到 JavaScript 引擎的处理队列中等待处理。")]),v._v(" "),r("p",[r("strong",[v._v("JavaScript引擎线程")])]),v._v(" "),r("p",[v._v("JavaScript 引擎，也可以称为JS内核，主要负责处理 JavaScript 脚本程序，例如V8引擎。JavaScript 引擎线程理所当然是负责解析 JavaScript 脚本，运行代码。")]),v._v(" "),r("p",[v._v("由于 JavaScript 是可操纵 DOM 的，如果在修改这些元素属性同时渲染界面（即 JavaScript 线程和UI线程同时运行），那么渲染线程前后获得的元素数据就可能不一致了。因此为了防止渲染出现不可预期的结果，浏览器设置 GUI 渲染线程与 JavaScript 引擎为互斥的关系，当 JavaScript 引擎执行时 GUI 线程会被挂起， GUI 更新会被保存在一个队列中等到引擎线程空闲时立即被执行。")]),v._v(" "),r("p",[v._v("作为浏览器脚本语言， JavaScript 的主要用途是与用户互动，以及操作DOM。这决定了它只能是单线程，否则会带来很复杂的同步问题。")]),v._v(" "),r("p",[r("strong",[v._v("Web Workers")])]),v._v(" "),r("p",[v._v("Web Worker为Web内容在后台线程中运行脚本提供了一种简单的方法。线程可以执行任务而不干扰用户界面。用来减轻cpu密集型计算类逻辑的负担。")]),v._v(" "),r("ul",[r("li",[v._v("一个worker是使用一个构造函数创建的一个对象 运行一个命名的JavaScript文件 - 这个文件包含将在工作线程中运行的代码; workers 运行在另一个全局上下文中,不同于当前的window. 因此，在 Worker 内通过 window获取全局作用域 (而不是self) 将返回错误。")]),v._v(" "),r("li",[v._v("JS 引擎线程与 worker 线程间通过特定的方式通信，你可以通过postMessage() 方法和onmessage事件处理函数触发workers的方法。")]),v._v(" "),r("li",[v._v("如果你需要从主线程中立刻终止一个运行中的worker，可以调用worker的terminate 方法。worker 线程会被立即杀死，不会有任何机会让它完成自己的操作或清理工作。而在worker线程中，workers 也可以调用自己的 close  方法进行关闭。")])])])}),[],!1,null,null,null);_.default=a.exports}}]);