(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{567:function(n,v,e){"use strict";e.r(v);var _=e(13),t=Object(_.a)({},(function(){var n=this,v=n.$createElement,e=n._self._c||v;return e("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"title"},[n._v("介绍")]),e("p",[n._v("JavaScript 本质上是一门单线程语言。对于在它被设计出来的那个年代来说，这样的设计是一个很好的选择。那个时候的人们很少有多处理器计算机，并且当时也只是打算用 JavaScript 来编写少量的代码。"),e("br"),n._v("\n随着时间的流逝，电脑的性能得到了飞速的提升。JavaScript 也变成了众多流行语言中的一员。许多非常受欢迎的应用或多或少都有 JavaScript 的影子。为此，找到一种可以突破传统单线程语言限制的方法变得很有必要。")])]),n._v(" "),e("p",[e("strong",[n._v("JavaScript执行上下文")])]),n._v(" "),e("p",[n._v("当一段JavaScript代码在运行的时候，它实际上是运行在"),e("code",[n._v("执行上下文")]),n._v("中。下面3种类型的代码会创建一个新的执行上下文：")]),n._v(" "),e("ul",[e("li",[e("code",[n._v("全局上下文")]),n._v("(又称"),e("code",[n._v("全局作用域")]),n._v(")是为运行代码主体而创建的执行上下文，也就是说它是为那些存在于JavaScript函数之外的任何代码而创建的。")]),n._v(" "),e("li",[n._v("每个函数会在执行的时候创建自己的执行上下文。这个上下文就是通常说的"),e("code",[n._v("“本地上下文”")]),n._v("/"),e("code",[n._v("“函数作用域”")]),n._v("。")]),n._v(" "),e("li",[n._v("使用 "),e("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/eval",target:"_blank",rel:"noopener noreferrer"}},[n._v("eval()"),e("OutboundLink")],1),n._v(" 函数也会创建一个新的执行上下文。")])]),n._v(" "),e("p",[n._v("每一个上下文在本质上都是一种作用域层级。每个代码段开始执行的时候都会创建一个新的上下文来运行它，并且在代码退出的时候销毁掉。看看下面这段JavaScript程序:")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("function fn1(str) {\n  function innerFn1 () {}\n\n  innerFn1();\n  console.log(str);\n}\n\nfn1('first');\nfn1('second');\nfn1('third');\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br")])]),e("p",[n._v("每个上下文创建的时候会被推入"),e("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Glossary/Call_stack",target:"_blank",rel:"noopener noreferrer"}},[n._v("执行上下文栈"),e("OutboundLink")],1),n._v("。当退出的时候，他会从上下文栈中移除。")]),n._v(" "),e("ul",[e("li",[n._v("程序开始运行时，全局上下文就会被创建好。\n"),e("ul",[e("li",[n._v("当执行到"),e("code",[n._v("fn1('first')")]),n._v("的时候会为"),e("code",[n._v("fn1()")]),n._v("函数创建一个它的上下文。这个执行上下文会被推入执行上下文栈中。\n"),e("ul",[e("li",[n._v("当"),e("code",[n._v("fn1()")]),n._v("调用"),e("code",[n._v("innerFn1()")]),n._v("的时候会为该方法创建一个新的上下文。并且在"),e("code",[n._v("innerFn1()")]),n._v("退出的时候它的上下文也会从执行栈中弹出并销毁。程序会从栈中获取下一个上下文并恢复执行，也就是从"),e("code",[n._v("fn1()")]),n._v("剩下的部分开始执行。")]),n._v(" "),e("li",[e("code",[n._v("fn1()")]),n._v("执行完毕并退出。其上下文也从栈中弹出并销毁。")])])]),n._v(" "),e("li",[n._v("当"),e("code",[n._v("fn1('second')")]),n._v("开始执行时，程序又会为他创建一个上下文并推入栈顶。\n"),e("ul",[e("li",[n._v("当 "),e("code",[n._v("fn1()")]),n._v(" 调用 "),e("code",[n._v("innerFn1()")]),n._v("的时候另一个上下文被创建并用于运行该函数。 当 "),e("code",[n._v("innerFn1()")]),n._v(" 退出的时候它的上下文也从栈中弹出并销毁。 "),e("code",[n._v("fn1()")]),n._v(" 得到恢复并继续执行剩下的部分。")]),n._v(" "),e("li",[e("code",[n._v("fn1()")]),n._v(" 执行完毕并退出，其上下文也从栈中弹出并销毁。")])])]),n._v(" "),e("li",[n._v("然后执行到"),e("code",[n._v("fn1('third')")]),n._v(" 又再为它创建一个上下文并推入栈顶。\n"),e("ul",[e("li",[n._v("当 "),e("code",[n._v("fn1()")]),n._v(" 调用 "),e("code",[n._v("innerFn1()")]),n._v("的时候，另一个上下文被创建用于执行该函数。当"),e("code",[n._v("innerFn1()")]),n._v("执行完毕，它的上下文也从栈中弹出并销毁。")]),n._v(" "),e("li",[e("code",[n._v("fn1()")]),n._v(" 执行完毕退出，其上下文也从栈中弹出并销毁。")])])])])]),n._v(" "),e("li",[n._v("主程序退出，全局执行上下文从执行栈中弹出。此时栈中所有的上下文都已经弹出，程序执行完毕。")])]),n._v(" "),e("p",[n._v("以这种方式来使用执行上下文，使得每个程序和函数都能拥有自己的变量和其他对象。每个上下文还能够额外的跟踪程序中下一行需要执行的代码以及一些对上下文非常重要的信息。以这种方式来使用上下文和上下文栈，使得我们可以对程序运行的一些基础部分进行管理，包括局部和全局变量、函数的调用和返回等。")]),n._v(" "),e("p",[n._v("关于递归函数——即多次调用自身的函数，需要特别注意：每次递归调用自身都会创建一个新的上下文。这使得JavaScript运行时能够追踪递归的层级以及从递归中得到返回值，但这也意味着每次递归都会消耗内存来创建上下文。所以若是你的递归函数中没有正确的返回值/没有及时中止递归，会使得"),e("code",[n._v("执行上下文栈")]),n._v("溢出，从而引发程序崩溃。")]),n._v(" "),e("p",[n._v("尾调用、"),e("strong",[n._v("闭包")])])])}),[],!1,null,null,null);v.default=t.exports}}]);