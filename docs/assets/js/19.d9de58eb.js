(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{571:function(e,t,s){"use strict";s.r(t);var n=s(13),r=Object(n.a)({},(function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"title"},[e._v("介绍")]),s("p",[e._v("JavaScript 本质上是一门单线程语言。对于在它被设计出来的那个年代来说，这样的设计是一个很好的选择。那个时候的人们很少有多处理器计算机，并且当时也只是打算用 JavaScript 来编写少量的代码。"),s("br"),e._v("\n随着时间的流逝，电脑的性能得到了飞速的提升。JavaScript 也变成了众多流行语言中的一员。许多非常受欢迎的应用或多或少都有 JavaScript 的影子。为此，找到一种可以突破传统单线程语言限制的方法变得很有必要。")])]),e._v(" "),s("p",[s("strong",[e._v("JavaScript执行上下文")])]),e._v(" "),s("p",[e._v("当一段JavaScript代码在运行的时候，它实际上是运行在"),s("code",[e._v("执行上下文")]),e._v("中。下面3种类型的代码会创建一个新的执行上下文：")]),e._v(" "),s("ul",[s("li",[s("code",[e._v("全局上下文")]),e._v("(又称"),s("code",[e._v("全局作用域")]),e._v(")是为运行代码主体而创建的执行上下文，也就是说它是为那些存在于JavaScript函数之外的任何代码而创建的。")]),e._v(" "),s("li",[e._v("每个函数会在执行的时候创建自己的执行上下文。这个上下文就是通常说的"),s("code",[e._v("“本地上下文”")]),e._v("/"),s("code",[e._v("“函数作用域”")]),e._v("。")]),e._v(" "),s("li",[e._v("使用 "),s("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/eval",target:"_blank",rel:"noopener noreferrer"}},[e._v("eval()"),s("OutboundLink")],1),e._v(" 函数也会创建一个新的执行上下文。")])]),e._v(" "),s("p",[e._v("每一个上下文在本质上都是一种作用域层级。每个代码段开始执行的时候都会创建一个新的上下文来运行它，并且在代码退出的时候销毁掉。看看下面这段JavaScript程序:")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("function fn1(str) {\n  function innerFn1 () {}\n\n  innerFn1();\n  console.log(str);\n}\n\nfn1('first');\nfn1('second');\nfn1('third');\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br")])]),s("p",[e._v("每个上下文创建的时候会被推入"),s("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Glossary/Call_stack",target:"_blank",rel:"noopener noreferrer"}},[e._v("执行上下文栈"),s("OutboundLink")],1),e._v("。当退出的时候，他会从上下文栈中移除。")]),e._v(" "),s("ul",[s("li",[e._v("程序开始运行时，全局上下文就会被创建好。\n"),s("ul",[s("li",[e._v("当执行到"),s("code",[e._v("fn1('first')")]),e._v("的时候会为"),s("code",[e._v("fn1()")]),e._v("函数创建一个它的上下文。这个执行上下文会被推入执行上下文栈中。\n"),s("ul",[s("li",[e._v("当"),s("code",[e._v("fn1()")]),e._v("调用"),s("code",[e._v("innerFn1()")]),e._v("的时候会为该方法创建一个新的上下文。并且在"),s("code",[e._v("innerFn1()")]),e._v("退出的时候它的上下文也会从执行栈中弹出并销毁。程序会从栈中获取下一个上下文并恢复执行，也就是从"),s("code",[e._v("fn1()")]),e._v("剩下的部分开始执行。")]),e._v(" "),s("li",[s("code",[e._v("fn1()")]),e._v("执行完毕并退出。其上下文也从栈中弹出并销毁。")])])]),e._v(" "),s("li",[e._v("当"),s("code",[e._v("fn1('second')")]),e._v("开始执行时，程序又会为他创建一个上下文并推入栈顶。\n"),s("ul",[s("li",[e._v("当 "),s("code",[e._v("fn1()")]),e._v(" 调用 "),s("code",[e._v("innerFn1()")]),e._v("的时候另一个上下文被创建并用于运行该函数。 当 "),s("code",[e._v("innerFn1()")]),e._v(" 退出的时候它的上下文也从栈中弹出并销毁。 "),s("code",[e._v("fn1()")]),e._v(" 得到恢复并继续执行剩下的部分。")]),e._v(" "),s("li",[s("code",[e._v("fn1()")]),e._v(" 执行完毕并退出，其上下文也从栈中弹出并销毁。")])])]),e._v(" "),s("li",[e._v("然后执行到"),s("code",[e._v("fn1('third')")]),e._v(" 又再为它创建一个上下文并推入栈顶。\n"),s("ul",[s("li",[e._v("当 "),s("code",[e._v("fn1()")]),e._v(" 调用 "),s("code",[e._v("innerFn1()")]),e._v("的时候，另一个上下文被创建用于执行该函数。当"),s("code",[e._v("innerFn1()")]),e._v("执行完毕，它的上下文也从栈中弹出并销毁。")]),e._v(" "),s("li",[s("code",[e._v("fn1()")]),e._v(" 执行完毕退出，其上下文也从栈中弹出并销毁。")])])])])]),e._v(" "),s("li",[e._v("主程序退出，全局执行上下文从执行栈中弹出。此时栈中所有的上下文都已经弹出，程序执行完毕。")])]),e._v(" "),s("p",[e._v("以这种方式来使用执行上下文，使得每个程序和函数都能拥有自己的变量和其他对象。每个上下文还能够额外的跟踪程序中下一行需要执行的代码以及一些对上下文非常重要的信息。以这种方式来使用上下文和上下文栈，使得我们可以对程序运行的一些基础部分进行管理，包括局部和全局变量、函数的调用和返回等。")]),e._v(" "),s("p",[e._v("关于递归函数——即多次调用自身的函数，需要特别注意：每次递归调用自身都会创建一个新的上下文。这使得JavaScript运行时能够追踪递归的层级以及从递归中得到返回值，但这也意味着每次递归都会消耗内存来创建上下文。所以若是你的递归函数中没有正确的返回值/没有及时中止递归，会使得"),s("code",[e._v("执行上下文栈")]),e._v("溢出，从而引发程序崩溃。")]),e._v(" "),s("p",[e._v("扩展阅读："),s("a",{attrs:{href:"https://linnerohara.github.io/blog/tag/js/202204061116.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("闭包"),s("OutboundLink")],1)]),e._v(" "),s("p",[s("strong",[e._v("事件循环（Event loops）")])]),e._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"title"},[e._v("JavaScript运行时")]),s("p",[e._v("在执行JavaScript代码的时候，JavaScript运行时实际上维护了一组用于执行JavaScript代码的代理。每个代理由一组执行上下文的集合、执行上下文栈、主线程、一组可能创建用于执行worker的额外的线程集合、一个任务队列以及一个微任务队列构成。除了主线程（某些浏览器在多个代理之间共享的主线程）之外，其他组成部分对该代理都是唯一的。")])]),s("p",[e._v("每个代理都是由"),s("strong",[e._v("事件循环")]),e._v("驱动的，事件循环负责收集用户事件（包括用户事件以及其他非用户事件等）、对任务进行排队以便在合适的时候执行回调。然后它执行所有处于等待中的JavaScript任务（宏任务），然后是微任务，然后在开始下一次循环之前执行一些必要的渲染和绘制操作。")]),e._v(" "),s("p",[e._v("网页或者app的代码和浏览器本身的用户界面程序运行在相同的"),s("span",{staticStyle:{color:"red"}},[e._v("线程")]),e._v("中,共享相同的事件循环。该线程就是"),s("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Glossary/Main_thread",target:"_blank",rel:"noopener noreferrer"}},[e._v("主线程"),s("OutboundLink")],1),e._v(",它除了运行网页本身的代码之外，还负责收集和派发用户和其他事件，以及渲染和绘制网页内容等。")]),e._v(" "),s("p",[e._v("然后，事件循环会驱动发生在浏览器中与用户交互有关的一切，但在这里，对我们来说，更重要的是需要了解它是如何负责调度和执行在其线程中执行的每段代码的。")]),e._v(" "),s("p",[e._v("在"),s("a",{attrs:{href:"https://html.spec.whatwg.org/multipage/webappapis.html#event-loop",target:"_blank",rel:"noopener noreferrer"}},[e._v("HTML5规范"),s("OutboundLink")],1),e._v("中指出，事件循环有以下三种循环：")]),e._v(" "),s("blockquote",[s("p",[e._v("Window 事件循环")]),e._v(" "),s("p",[e._v("Worker 事件循环")]),e._v(" "),s("p",[e._v("Worklet 事件循环（"),s("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/API/Worklet",target:"_blank",rel:"noopener noreferrer"}},[e._v("Worklet"),s("OutboundLink")],1),e._v(" 接口是 "),s("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/API/Web_Workers_API",target:"_blank",rel:"noopener noreferrer"}},[e._v("Web Worker"),s("OutboundLink")],1),e._v("的轻量级版本，使开发人员能够访问渲染管线的低级部分）")])]),e._v(" "),s("p",[e._v("多个"),s("span",{staticStyle:{color:"red"}},[e._v("同源窗口")]),e._v("(指由同一个窗口打开的多个子窗口或者同一个窗口的多个iframe等，而非同源策略中的源)可能运行在相同的事件循环中，每个队列任务进入到事件循环中以便处理器能够轮流对它们进行处理。")]),e._v(" "),s("p",[e._v("在特定情况下，同源窗口之间共享事件循环，例如：")]),e._v(" "),s("ul",[s("li",[e._v("如果一个窗口打开了另一个窗口，它们可能会共享一个事件循环。")]),e._v(" "),s("li",[e._v("如果窗口是包含在"),s("code",[e._v("<iframe>")]),e._v("中，则它可能会和包含它的窗口共享一个事件循环。")]),e._v(" "),s("li",[e._v("在多进程浏览器中多个窗口碰巧共享了同一个进程。")])]),e._v(" "),s("p",[e._v("这种特定情况依赖于浏览器的具体实现，各个浏览器可能并不一样。")]),e._v(" "),s("p",[e._v("HTML5规范中指出")]),e._v(" "),s("ol",[s("li",[e._v("每个浏览器环境，至多有一个event loop")]),e._v(" "),s("li",[e._v("一个event loop可以有1个或多个task queue。")]),e._v(" "),s("li",[e._v("一个task queue是一列有序的task，用来做以下工作："),s("code",[e._v("Events task，Parsing task， Callbacks task， Using a resource task， Reacting to DOM manipulation task等")]),e._v("。")])]),e._v(" "),s("p",[e._v("每个task都具有以下的结构")]),e._v(" "),s("blockquote",[s("p",[e._v("步骤：指定任务要完成的工作的一系列步骤。")]),e._v(" "),s("p",[e._v("来源（source）：任务源之一，用于对相关任务进行分组和序列化。从同一个task source来的task必须放到同一个task queue，从不同源来的则被添加到不同队列。每个队列都保证自己队列的先进先出的执行顺序，但浏览器可以决定从哪个task source获取task。这允许浏览器为不同的task source设置不同的优先级，比如为用户交互设置更高优先级来使用户感觉流畅。")]),e._v(" "),s("p",[e._v("文档（document）：与任务相关的document，比如一个task在某个element的上下文中进入队列，那么它的document就是这个element的document。对于不在窗口事件循环中的任务，则为 null。")])]),e._v(" "),s("p",[e._v('每个"线程"都有自己的事件循环，因此每个Web工作线程都有自己的事件循环，因此它可以独立执行，而同一源上的所有窗口共享一个事件循环，所以它们可以同步通信。')]),e._v(" "),s("p",[e._v("例如setTimeout 是定时器线程往队列里压、XMLHttpRequest.onreadystatechange 是 HTTP 异步请求线程往队列里压。详情请见"),s("a",{attrs:{href:"https://linnerohara.github.io/blog/tag/html/202204072043.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("浏览器是如何调度进程和线程的"),s("OutboundLink")],1)]),e._v(" "),s("p",[e._v("但事件循环不一定对应于实现线程。例如，可以在单个线程中协作调度多个窗口事件循环。且并非所有事件都是使用任务队列调度的。许多是在其他任务期间调度的。")]),e._v(" "),s("p",[s("strong",[e._v("宏任务/任务（MacroTask/Tasks）")])]),e._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"title"},[e._v("tips")]),s("p",[e._v("通过查阅"),s("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/API/HTML_DOM_API/Microtask_guide",target:"_blank",rel:"noopener noreferrer"}},[e._v("MDN"),s("OutboundLink")],1),e._v("和"),s("a",{attrs:{href:"https://html.spec.whatwg.org/multipage/webappapis.html#event-loop",target:"_blank",rel:"noopener noreferrer"}},[e._v("HTML规范"),s("OutboundLink")],1),e._v("，我发现国外并没有宏任务这一说法，而是任务(Tasks)，所谓宏任务更像是国内一种语义化的说法，所以在下文中若是发现部分说法与所查阅资料不一样，请不必过分担心。")])]),s("p",[e._v("一个"),s("strong",[e._v("任务")]),e._v("就是执行一段程序、执行一个事件回调或者一个interval/timeout被触发等标准机制而被调度的任意JavaScript代码。这些都在"),s("strong",[e._v("任务队列（task queue）")]),e._v("上被调度。")]),e._v(" "),s("p",[e._v("在以下时机，任务会被添加到任务队列：")]),e._v(" "),s("ul",[s("li",[e._v("一段新程序或子程序被直接执行时（比如从一个控制台，或在一个"),s("code",[e._v("<script>")]),e._v("元素中运行代码）。")]),e._v(" "),s("li",[e._v("触发了一个事件，将其回调函数添加到任务队列时。")]),e._v(" "),s("li",[e._v("执行到一个由"),s("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/API/setTimeout",target:"_blank",rel:"noopener noreferrer"}},[e._v("setTimeout()"),s("OutboundLink")],1),e._v(" 或 "),s("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/API/setInterval",target:"_blank",rel:"noopener noreferrer"}},[e._v("setInterval()"),s("OutboundLink")],1),e._v(" 创建的 timeout 或 interval，以致相应的回调函数被添加到任务队列时。")])]),e._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"title"},[e._v("以下API会将相应的回调函数添加到任务队列中")]),s("p",[s("code",[e._v("I/O")]),e._v("、"),s("code",[e._v("setTimeout")]),e._v("、"),s("code",[e._v("setInterval")]),e._v("、"),s("code",[e._v("setImmediate")]),e._v("、"),s("code",[e._v("requestAnimationFrame")])])]),s("p",[e._v("事件循环驱动你的代码按照这些任务排队的顺序，一个接一个地处理它们。在当前迭代轮次中，只有那些当事件循环过程开始时 已经处于任务队列中 的任务会被执行。其余的任务不得不等待到下一次迭代。")]),e._v(" "),s("p",[s("strong",[e._v("微任务（MicroTasks）")])]),e._v(" "),s("p",[e._v("一个"),s("strong",[e._v("微任务（microtask）")]),e._v("就是一个简短的函数，当创建该函数的函数执行之后，并且 只有当 Javascript 调用栈为空，而控制权尚未返回给浏览器用来驱动执行环境的事件循环之前，该微任务才会被执行。并且在"),s("code",[e._v("微任务期间排队")]),e._v("的任何其他微任务都将添加到"),s("code",[e._v("队列的末尾并进行处理")]),e._v("。"),s("code",[e._v("Window")]),e._v("暴露了"),s("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/API/queueMicrotask",target:"_blank",rel:"noopener noreferrer"}},[e._v("queueMicrotask()"),s("OutboundLink")],1),e._v("方法来允许用户向队列中添加更多的微任务。")]),e._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"title"},[e._v("以下API会将相应的回调函数添加到微任务队列中")]),s("p",[s("code",[e._v("process")]),e._v("、"),s("code",[e._v("nextTick")]),e._v("、"),s("code",[e._v("Mutation")]),e._v("、"),s("code",[e._v("Observer")]),e._v("、"),s("code",[e._v("Promise.then")]),e._v(" 、"),s("code",[e._v("catch")]),e._v("、"),s("code",[e._v("finally")]),e._v("、"),s("code",[e._v("queueMicrotask")])])]),s("div",{staticClass:"custom-block warning"},[s("p",{staticClass:"title"}),s("p",[e._v("注意： 因为微任务自身可以入列更多的微任务，且事件循环会持续处理微任务直至队列为空，那么就存在一种使得事件循环无尽处理微任务的真实风险。如何处理递归增加微任务是要谨慎而行的。")])]),s("p",[e._v("观察以下代码，该代码将以什么顺序显示日志呢：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("console.log('script start');\n\nsetTimeout(function () {\n  console.log('setTimeout');\n}, 0);\n\nPromise.resolve()\n  .then(function () {\n    console.log('promise1');\n  })\n  .then(function () {\n    console.log('promise2');\n  });\n\nconsole.log('script end');\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br"),s("span",{staticClass:"line-number"},[e._v("15")]),s("br")])]),s("p",[e._v("正确答案是"),s("code",[e._v("script start")]),e._v(" "),s("code",[e._v("script end")]),e._v(" "),s("code",[e._v("promise1")]),e._v(" "),s("code",[e._v("promise2")]),e._v(" "),s("code",[e._v("setTimeout")])]),e._v(" "),s("p",[e._v("可以注意到，从主程序体中输出的日志首先出现，接下来是微任务中的输出，其后是 timeout 的回调。这是因为当处理主程序运行的任务退出后，微任务队列先于 timeout 回调所在的任务队列被处理，且在此期间的任何微任务都将添加到队列的末尾并被处理，所以"),s("code",[e._v("promise2")]),e._v("要优先于"),s("code",[e._v("setTimeout")]),e._v("被打印出来。要记住宏任务和微任务是保持各自独立的队列的，且微任务先执行。")]),e._v(" "),s("p",[e._v("在单次循环中，一次"),s("code",[e._v("最多处理一个宏任务")]),e._v("（其他的仍然驻留在队列中），然而却"),s("code",[e._v("可以处理完所有的微任务")]),e._v("。观察以下代码，该代码将以什么顺序显示日志呢：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("console.log('script start');\n\nsetTimeout(function () {\n  console.log('setTimeout');\n  Promise.resolve()\n  .then(function () {\n    console.log('promise1-1');\n  })\n  .then(function () {\n    console.log('promise1-2');\n  });\n}, 0);\n\nsetTimeout(function () {\n  console.log('setTimeout1');\n}, 0);\n\nPromise.resolve()\n  .then(function () {\n    console.log('promise1');\n  })\n  .then(function () {\n    console.log('promise2');\n  });\n\nconsole.log('script end');\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br"),s("span",{staticClass:"line-number"},[e._v("15")]),s("br"),s("span",{staticClass:"line-number"},[e._v("16")]),s("br"),s("span",{staticClass:"line-number"},[e._v("17")]),s("br"),s("span",{staticClass:"line-number"},[e._v("18")]),s("br"),s("span",{staticClass:"line-number"},[e._v("19")]),s("br"),s("span",{staticClass:"line-number"},[e._v("20")]),s("br"),s("span",{staticClass:"line-number"},[e._v("21")]),s("br"),s("span",{staticClass:"line-number"},[e._v("22")]),s("br"),s("span",{staticClass:"line-number"},[e._v("23")]),s("br"),s("span",{staticClass:"line-number"},[e._v("24")]),s("br"),s("span",{staticClass:"line-number"},[e._v("25")]),s("br"),s("span",{staticClass:"line-number"},[e._v("26")]),s("br")])]),s("p",[e._v("正确答案是"),s("code",[e._v("script start")]),e._v(" "),s("code",[e._v("script end")]),e._v(" "),s("code",[e._v("promise1")]),e._v(" "),s("code",[e._v("promise2")]),e._v(" "),s("code",[e._v("setTimeout")]),e._v(" "),s("code",[e._v("promise1-1")]),e._v(" "),s("code",[e._v("promise1-2")]),e._v(" "),s("code",[e._v("setTimeout1")])]),e._v(" "),s("p",[e._v("首先处理完主程序体中的任务后，微任务队列先于 timeout 回调所在的任务队列被处理。之后按顺序执行任务队列中的 timeout 回调，在回调中又将两个微任务推送入微任务队列中，此时该调用栈为空，再一次检查微任务队列并执行。微任务队列中的任务执行完毕，检查渲染，GUI线程接管渲染。渲染完毕后，js线程接管，开启下一次事件循环，执行下一次宏任务并打印出 setTimeout1。")]),e._v(" "),s("p",[s("img",{attrs:{src:"https://raw.githubusercontent.com/LinnerOhara/blog/main/img/202204072037.png",alt:"Event loop"}})]),e._v(" "),s("p",[s("strong",[e._v("宏任务 VS 微任务")]),e._v("\n宏任务包括生成dom对象、解析HTML、执行主线程js代码、更改当前URL。以及一些事件，如页面加载、输入、网络事件和定时器事件。从浏览器的角度看，宏任务代表一些离散的独立的工作。当执行完一个task后，浏览器可以继续其他的工作，如页面重渲染和垃圾回收。")]),e._v(" "),s("blockquote",[s("p",[e._v("处理事件时应注意其发生的频率和处理所需时间。如在处理鼠标移动事件时应该格外小心。移动鼠标会导致大量的事件排队，因此在该鼠标移动处理程序中执行任何复杂的操作都可能导致应用变得很不流畅。")])]),e._v(" "),s("p",[e._v("微任务则是完成一些更新应用程序状态的小任务，如处理promise的回调和DOM的修改，这些任务在浏览器重渲染前执行。微任务应该以异步的方式尽快执行，其开销比执行一个新的宏任务要小。微任务使得我们可以在UI重渲染之前执行某些任务，从而避免了不必要的UI渲染，这些渲染可能导致显示的应用程序状态不一致。（例如Vue的"),s("a",{attrs:{href:""}},[e._v("nextTick")]),e._v(" API）")]),e._v(" "),s("p",[s("strong",[e._v("参考链接：")])]),e._v(" "),s("p",[s("a",{attrs:{href:"https://www.youtube.com/watch?v=8aGhZQkoFbQ",target:"_blank",rel:"noopener noreferrer"}},[e._v("What the heck is the event loop anyway"),s("OutboundLink")],1)]),e._v(" "),s("p",[s("a",{attrs:{href:"https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Tasks, microtasks, queues and schedules"),s("OutboundLink")],1)]),e._v(" "),s("p",[s("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/24460769",target:"_blank",rel:"noopener noreferrer"}},[e._v("HTML系列：macrotask和microtask"),s("OutboundLink")],1)])])}),[],!1,null,null,null);t.default=r.exports}}]);