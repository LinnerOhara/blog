(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{569:function(n,a,s){"use strict";s.r(a);var e=s(13),t=Object(e.a)({},(function(){var n=this,a=n.$createElement,s=n._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"title"},[n._v("介绍")]),s("p",[n._v("一个函数和对其周围状态"),s("strong",[n._v("（lexical environment，词法环境）")]),n._v("的引用捆绑在一起（或者说函数被引用包围），这样的组合就是"),s("strong",[n._v("闭包（closure）")]),n._v("。也就是说，闭包让你可以在一个内层函数中访问到其外层函数的作用域。在 JavaScript 中，每当创建一个函数，闭包就会在函数创建的同时被创建出来。")])]),n._v(" "),s("p",[s("strong",[n._v("闭包")])]),n._v(" "),s("p",[n._v("先来考虑一下例子:")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('function makeFunc() {\n    var name = "Mozilla";\n    function displayName() {\n        alert(name);\n    }\n    return displayName;\n}\n\nvar myFunc = makeFunc();\nmyFunc();\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br")])]),s("p",[n._v("第一眼看上去，也许不能直观地看出这段代码能够正常运行。在一些编程语言中，一个函数中的局部变量仅存在于此函数的执行期间。一旦"),s("code",[n._v("makeFunc()")]),n._v("执行完毕，你可能会认为"),s("code",[n._v("name")]),n._v("变量将不能再被访问。然而，因为代码仍按预期运行，所以在JavaScript中情况显然与此不同。")]),n._v(" "),s("p",[n._v("原因在于，JavaScript中的函数会形成闭包。"),s("code",[n._v("闭包")]),n._v("是由函数以及声明该函数的词法环境组合而成的。该环境包含了这个闭包创建时作用域内的任何局部变量。在本例子中，"),s("code",[n._v("myFunc")]),n._v("是执行"),s("code",[n._v("makeFunc")]),n._v("时创建的"),s("code",[n._v("displayName")]),n._v("函数实例的引用。"),s("code",[n._v("displayName")]),n._v("的实例维持了一个对它的词法环境(变量"),s("code",[n._v("name")]),n._v("存在于其中)的引用。因此，当"),s("code",[n._v("myFunc")]),n._v("被调用时，变量"),s("code",[n._v("name")]),n._v("依然可用，其值"),s("code",[n._v("Mozilla")]),n._v("就被传递到"),s("code",[n._v("alert")]),n._v("中。")]),n._v(" "),s("p",[n._v("下面是一个更有意思的实例——一个"),s("code",[n._v("makeAdder")]),n._v("函数：")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("function makeAdder(x) {\n  return function(y) {\n    return x + y;\n  };\n}\n\nvar add5 = makeAdder(5);\nvar add10 = makeAdder(10);\n\nconsole.log(add5(2));  // 7\nconsole.log(add10(2)); // 12\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br")])]),s("p",[n._v("在这个示例中，我们定义了"),s("code",[n._v("makeAdder(x)")]),n._v("函数，它接受一个参数"),s("code",[n._v("x")]),n._v("，并返回一个新的函数。返回的函数接受一个参数"),s("code",[n._v("y")]),n._v("，并返回"),s("code",[n._v("x+y")]),n._v("的值。")])])}),[],!1,null,null,null);a.default=t.exports}}]);